// App.js
import React, { useState, useEffect } from 'react';
import {
  SafeAreaView,
  StyleSheet,
  Text,
  View,
  TouchableWithoutFeedback,
  Animated,
  Dimensions,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const STORAGE_KEY = '@tap_count';

const App = () => {
  const [tapCount, setTapCount] = useState(0);
  const [ripples, setRipples] = useState([]);

  // Load saved tap count on app launch
  useEffect(() => {
    loadTapCount();
  }, []);

  const loadTapCount = async () => {
    try {
      const savedCount = await AsyncStorage.getItem(STORAGE_KEY);
      if (savedCount !== null) {
        setTapCount(parseInt(savedCount, 10));
      }
    } catch (error) {
      console.error('Error loading tap count:', error);
    }
  };

  const saveTapCount = async (count) => {
    try {
      await AsyncStorage.setItem(STORAGE_KEY, count.toString());
    } catch (error) {
      console.error('Error saving tap count:', error);
    }
  };

  const createRipple = (event) => {
    const { locationX, locationY } = event.nativeEvent;
    
    // Create new ripple
    const newRipple = {
      id: Date.now(),
      locationX,
      locationY,
      animation: new Animated.Value(0),
    };

    // Start ripple animation
    Animated.timing(newRipple.animation, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    }).start(() => {
      // Remove ripple after animation
      setRipples(current => current.filter(r => r.id !== newRipple.id));
    });

    setRipples(current => [...current, newRipple]);
    
    // Update and save tap count
    const newCount = tapCount + 1;
    setTapCount(newCount);
    saveTapCount(newCount);
  };

  const renderRipples = () => {
    return ripples.map(ripple => {
      const rippleStyle = {
        position: 'absolute',
        left: ripple.locationX - 100, // Center the ripple on touch point
        top: ripple.locationY - 100,  // Center the ripple on touch point
        width: 200,
        height: 200,
        borderRadius: 100,
        backgroundColor: 'rgba(255, 255, 255, 0.3)',
        transform: [{
          scale: ripple.animation.interpolate({
            inputRange: [0, 1],
            outputRange: [0, 1],
          })
        }],
        opacity: ripple.animation.interpolate({
          inputRange: [0, 1],
          outputRange: [0.8, 0],
        }),
      };

      return (
        <Animated.View
          key={ripple.id}
          style={rippleStyle}
        />
      );
    });
  };

  return (
    <SafeAreaView style={styles.container}>
      <TouchableWithoutFeedback onPress={createRipple}>
        <View style={styles.gameArea}>
          <Text style={styles.counter}>{tapCount}</Text>
          {renderRipples()}
        </View>
      </TouchableWithoutFeedback>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  gameArea: {
    flex: 1,
    width: '100%',
    height: '100%',
  },
  counter: {
    position: 'absolute',
    top: 20,
    right: 20,
    fontSize: 32,
    fontWeight: 'bold',
    color: '#FFFFFF',
    zIndex: 1,
  },
});

export default App;